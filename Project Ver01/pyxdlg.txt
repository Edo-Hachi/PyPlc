# pyxdlg.py 使用マニュアル

## 概要
pyxdlg.pyは、Pyxelベースのシンプルなモーダルダイアログシステムです。
EDITモード拡張用のダイアログ、テキスト入力、ボタンコンポーネントを提供します。

## 主な特徴
- モーダルダイアログでの入力処理
- 入力タイプ別バリデーション（TEXT/NUMBER/DEVICE_ADDRESS）
- JSONファイルでのダイアログレイアウト定義
- Windowsリソースファイル(.rc)風の設計
- マウス・キーボード両対応

## 基本的な使用方法

### 1. インポート
```python
import pyxdlg

# または、必要な関数のみインポート
from pyxdlg import input_device_address, input_number, input_text
from pyxdlg import JsonDialogBuilder
```

### 2. 従来API（シンプル）

#### デバイスアドレス入力
```python
result, text = pyxdlg.input_device_address("Device Settings", "X001")
if result:  # OKが押された場合
    print(f"入力されたアドレス: {text}")
else:      # Cancelが押された場合
    print("キャンセルされました")
```

#### 数値入力
```python
result, text = pyxdlg.input_number("Timer Settings", "Timer value (sec):", "3")
if result:
    timer_value = int(text) if text.isdigit() else 0
    print(f"タイマー値: {timer_value}秒")
```

#### テキスト入力
```python
result, text = pyxdlg.input_text("Name Input", "Enter your name:", "PyPlc")
if result:
    print(f"入力された名前: {text}")
```

### 3. JSONリソースAPI（高度）

#### JSONファイルからダイアログ表示
```python
try:
    result, values = pyxdlg.JsonDialogBuilder.show_json_dialog("dialogs/device_settings.json")
    if result:
        device_address = values.get('text', '')
        print(f"デバイスアドレス: {device_address}")
except FileNotFoundError:
    print("JSONファイルが見つかりません")
```

#### 初期値を指定してダイアログ表示
```python
result, values = pyxdlg.JsonDialogBuilder.show_json_dialog(
    "dialogs/timer_settings.json", 
    preset_value="10"  # 初期値を10に設定
)
```

## JSONダイアログ定義

### 基本構造
```json
{
  "title": "ダイアログタイトル",
  "width": 220,
  "height": 140,
  "controls": [
    {
      "type": "label",
      "id": "label1",
      "x": 10,
      "y": 20,
      "text": "表示テキスト",
      "color": "white"
    },
    {
      "type": "textinput",
      "id": "input1",
      "x": 10,
      "y": 50,
      "width": 120,
      "height": 20,
      "input_type": "device_address",
      "placeholder": "X001",
      "value": "X001"
    }
  ]
}
```

### コントロールタイプ

#### label（ラベル）
```json
{
  "type": "label",
  "id": "unique_id",
  "x": 10,
  "y": 20,
  "text": "表示するテキスト",
  "color": "white"
}
```

#### textinput（テキスト入力）
```json
{
  "type": "textinput",
  "id": "unique_id",
  "x": 10,
  "y": 50,
  "width": 120,
  "height": 20,
  "input_type": "device_address",  // "text", "number", "device_address"
  "placeholder": "プレースホルダー",
  "value": "初期値"
}
```

### 利用可能な色名
- "black", "white", "red", "green", "blue", "yellow"
- "cyan", "pink", "gray", "orange", "brown", "purple"
- "navy", "dark_blue", "lime", "peach"

### 入力タイプ
- "text": 英数字（A-Z, 0-9）
- "number": 数字のみ（0-9）
- "device_address": デバイスアドレス形式（X001, M100等）

## PyPlcプロジェクトでの統合例

### main.pyでの使用例
```python
import pyxel
import pyxdlg

class PLCSimulator:
    def __init__(self):
        self.edit_mode = True
        
    def handle_device_edit(self, grid_x, grid_y):
        """デバイス編集処理"""
        if self.edit_mode:
            # デバイス設定ダイアログ表示
            result, address = pyxdlg.input_device_address(
                "Device Settings", 
                "X001"  # デフォルト値
            )
            
            if result:
                # デバイス配置処理
                self.place_device(grid_x, grid_y, address)
                print(f"デバイス {address} を ({grid_x}, {grid_y}) に配置")
    
    def handle_timer_settings(self):
        """タイマー設定処理"""
        result, timer_value = pyxdlg.input_number(
            "Timer Settings",
            "Preset time (seconds):",
            "3"
        )
        
        if result and timer_value.isdigit():
            preset_time = int(timer_value)
            self.setup_timer(preset_time)
    
    def show_custom_dialog(self):
        """カスタムJSONダイアログ"""
        try:
            result, values = pyxdlg.JsonDialogBuilder.show_json_dialog(
                "dialogs/device_settings.json"
            )
            if result:
                return values.get('text', '')
        except FileNotFoundError:
            print("ダイアログ定義ファイルが見つかりません")
        return None
```

### イベント処理での統合
```python
def update(self):
    # ENTERキーでデバイス設定
    if pyxel.btnp(pyxel.KEY_RETURN) and self.edit_mode:
        if self.selected_device:
            result, address = pyxdlg.input_device_address(
                "Edit Device", 
                self.selected_device.address
            )
            if result:
                self.selected_device.address = address
    
    # F1キーでタイマー設定
    if pyxel.btnp(pyxel.KEY_F1):
        result, value = pyxdlg.input_number("Timer Value", "Seconds:", "3")
        if result:
            self.timer_preset = int(value) if value.isdigit() else 3
```

## テストコード集

### 基本機能テスト
```python
#!/usr/bin/env python3
"""pyxdlg.py 基本機能テスト"""

import pyxel
import pyxdlg

def test_basic_dialogs():
    """基本ダイアログのテスト"""
    pyxel.init(256, 256, title="PyxDialog Basic Test")
    
    def update():
        if pyxel.btnp(pyxel.KEY_Q):
            pyxel.quit()
            
        if pyxel.btnp(pyxel.KEY_1):
            print("=== デバイスアドレス入力テスト ===")
            result, text = pyxdlg.input_device_address("Device Test", "X001")
            print(f"結果: OK={result}, アドレス='{text}'")
            
        if pyxel.btnp(pyxel.KEY_2):
            print("=== 数値入力テスト ===")
            result, text = pyxdlg.input_number("Number Test", "数値を入力:", "100")
            print(f"結果: OK={result}, 数値='{text}'")
            
        if pyxel.btnp(pyxel.KEY_3):
            print("=== テキスト入力テスト ===")
            result, text = pyxdlg.input_text("Text Test", "名前を入力:", "TEST")
            print(f"結果: OK={result}, テキスト='{text}'")
    
    def draw():
        pyxel.cls(pyxel.COLOR_BLACK)
        pyxel.text(10, 10, "Basic Dialog Test", pyxel.COLOR_WHITE)
        pyxel.text(10, 30, "1: Device Address", pyxel.COLOR_WHITE)
        pyxel.text(10, 40, "2: Number Input", pyxel.COLOR_WHITE)
        pyxel.text(10, 50, "3: Text Input", pyxel.COLOR_WHITE)
        pyxel.text(10, 70, "Q: Quit", pyxel.COLOR_PINK)
    
    pyxel.run(update, draw)

if __name__ == "__main__":
    test_basic_dialogs()
```

### JSONダイアログテスト
```python
#!/usr/bin/env python3
"""pyxdlg.py JSONダイアログテスト"""

import pyxel
import pyxdlg

def test_json_dialogs():
    """JSONダイアログのテスト"""
    pyxel.init(256, 256, title="PyxDialog JSON Test")
    
    def update():
        if pyxel.btnp(pyxel.KEY_Q):
            pyxel.quit()
            
        if pyxel.btnp(pyxel.KEY_1):
            print("=== JSON デバイス設定テスト ===")
            try:
                result, values = pyxdlg.JsonDialogBuilder.show_json_dialog(
                    "dialogs/device_settings.json"
                )
                print(f"結果: OK={result}, 値={values}")
            except FileNotFoundError as e:
                print(f"エラー: {e}")
                
        if pyxel.btnp(pyxel.KEY_2):
            print("=== JSON タイマー設定テスト（初期値指定） ===")
            try:
                result, values = pyxdlg.JsonDialogBuilder.show_json_dialog(
                    "dialogs/timer_settings.json",
                    preset_value="15"  # 初期値を15に設定
                )
                print(f"結果: OK={result}, 値={values}")
            except FileNotFoundError as e:
                print(f"エラー: {e}")
    
    def draw():
        pyxel.cls(pyxel.COLOR_BLACK)
        pyxel.text(10, 10, "JSON Dialog Test", pyxel.COLOR_WHITE)
        pyxel.text(10, 30, "1: JSON Device Settings", pyxel.COLOR_WHITE)
        pyxel.text(10, 40, "2: JSON Timer (with default)", pyxel.COLOR_WHITE)
        pyxel.text(10, 60, "Q: Quit", pyxel.COLOR_PINK)
    
    pyxel.run(update, draw)

if __name__ == "__main__":
    test_json_dialogs()
```

### エラーハンドリングテスト
```python
#!/usr/bin/env python3
"""pyxdlg.py エラーハンドリングテスト"""

import pyxdlg

def test_error_handling():
    """エラーハンドリングのテスト"""
    
    print("=== エラーハンドリングテスト ===")
    
    # 存在しないJSONファイル
    try:
        result, values = pyxdlg.JsonDialogBuilder.show_json_dialog("nonexistent.json")
        print("エラー: 例外が発生しませんでした")
    except FileNotFoundError:
        print("✓ 存在しないファイルのエラーハンドリング成功")
    
    # 無効なJSON形式
    with open("test_invalid.json", "w") as f:
        f.write("{ invalid json }")
    
    try:
        result, values = pyxdlg.JsonDialogBuilder.show_json_dialog("test_invalid.json")
        print("エラー: JSON解析エラーが発生しませんでした")
    except Exception as e:
        print(f"✓ 無効なJSON形式のエラーハンドリング成功: {type(e).__name__}")
    
    # クリーンアップ
    import os
    if os.path.exists("test_invalid.json"):
        os.remove("test_invalid.json")

if __name__ == "__main__":
    test_error_handling()
```

### 統合テスト（PyPlc風）
```python
#!/usr/bin/env python3
"""PyPlc統合シミュレーションテスト"""

import pyxel
import pyxdlg

class MockPLCSimulator:
    """PyPlcシミュレーター（テスト用）"""
    
    def __init__(self):
        self.edit_mode = True
        self.devices = {}
        self.selected_pos = (0, 0)
    
    def run(self):
        pyxel.init(256, 256, title="Mock PLC Simulator")
        pyxel.run(self.update, self.draw)
    
    def update(self):
        if pyxel.btnp(pyxel.KEY_Q):
            pyxel.quit()
        
        # TABキーでモード切り替え
        if pyxel.btnp(pyxel.KEY_TAB):
            self.edit_mode = not self.edit_mode
            print(f"モード切り替え: {'EDIT' if self.edit_mode else 'RUN'}")
        
        # ENTERキーでデバイス設定（EDITモードのみ）
        if pyxel.btnp(pyxel.KEY_RETURN) and self.edit_mode:
            self.show_device_settings()
        
        # F1キーでタイマー設定
        if pyxel.btnp(pyxel.KEY_F1):
            self.show_timer_settings()
        
        # F2キーでJSONダイアログテスト
        if pyxel.btnp(pyxel.KEY_F2):
            self.show_json_dialog()
    
    def show_device_settings(self):
        """デバイス設定ダイアログ"""
        current_device = self.devices.get(self.selected_pos, "X001")
        result, address = pyxdlg.input_device_address("Device Settings", current_device)
        
        if result:
            self.devices[self.selected_pos] = address
            print(f"デバイス {address} を位置 {self.selected_pos} に設定")
    
    def show_timer_settings(self):
        """タイマー設定ダイアログ"""
        result, value = pyxdlg.input_number("Timer Settings", "Preset (sec):", "3")
        
        if result and value.isdigit():
            preset = int(value)
            print(f"タイマープリセット値: {preset}秒")
    
    def show_json_dialog(self):
        """JSONダイアログテスト"""
        try:
            result, values = pyxdlg.JsonDialogBuilder.show_json_dialog(
                "dialogs/device_settings.json"
            )
            if result:
                print(f"JSON結果: {values}")
        except FileNotFoundError:
            print("dialogs/device_settings.json が見つかりません")
    
    def draw(self):
        pyxel.cls(pyxel.COLOR_BLACK)
        
        # タイトル
        pyxel.text(10, 10, "Mock PLC Simulator", pyxel.COLOR_WHITE)
        
        # モード表示
        mode_color = pyxel.COLOR_GREEN if self.edit_mode else pyxel.COLOR_RED
        mode_text = "EDIT MODE" if self.edit_mode else "RUN MODE"
        pyxel.text(10, 25, mode_text, mode_color)
        
        # 操作説明
        pyxel.text(10, 45, "TAB: Mode Toggle", pyxel.COLOR_WHITE)
        pyxel.text(10, 55, "ENTER: Device Settings (EDIT)", pyxel.COLOR_WHITE)
        pyxel.text(10, 65, "F1: Timer Settings", pyxel.COLOR_WHITE)
        pyxel.text(10, 75, "F2: JSON Dialog Test", pyxel.COLOR_WHITE)
        pyxel.text(10, 85, "Q: Quit", pyxel.COLOR_PINK)
        
        # デバイス状況
        y_pos = 110
        pyxel.text(10, y_pos, "Devices:", pyxel.COLOR_CYAN)
        for i, (pos, device) in enumerate(self.devices.items()):
            pyxel.text(10, y_pos + 15 + i * 10, f"{pos}: {device}", pyxel.COLOR_WHITE)

if __name__ == "__main__":
    simulator = MockPLCSimulator()
    simulator.run()
```

## ファイル構成

```
PyPlc/
├── pyxdlg.py                    # メインモジュール
├── pyxdlg.txt                   # このマニュアル
├── dialogs/                     # JSONダイアログ定義
│   ├── device_settings.json     # デバイス設定ダイアログ
│   ├── timer_settings.json      # タイマー設定ダイアログ
│   └── text_input.json          # テキスト入力ダイアログ
└── main.py                      # PyPlcメインプログラム
```

## トラブルシューティング

### よくある問題

1. **JSONファイルが見つからない**
   ```python
   # 解決策: ファイルパスを確認
   import os
   if not os.path.exists("dialogs/device_settings.json"):
       print("JSONファイルが存在しません")
   ```

2. **入力値の検証**
   ```python
   # デバイスアドレスの形式チェック
   result, address = pyxdlg.input_device_address("Device", "X001")
   if result:
       if len(address) == 4 and address[0] in 'XYMTCD' and address[1:].isdigit():
           print("有効なアドレス")
       else:
           print("無効なアドレス形式")
   ```

3. **数値変換エラー**
   ```python
   result, value = pyxdlg.input_number("Number", "Value:", "0")
   if result:
       try:
           num = int(value)
       except ValueError:
           print("数値変換エラー")
           num = 0
   ```

## 注意事項

- ダイアログ表示中はメインループが停止します
- JSON定義ファイルはUTF-8エンコーディングで保存してください
- 大きすぎるダイアログは画面からはみ出る可能性があります
- 同時に複数のダイアログを表示することはできません

## バージョン情報

- 初回作成: 2025-01-25
- 対応Pyxelバージョン: 1.9.0+
- Python要件: 3.8+