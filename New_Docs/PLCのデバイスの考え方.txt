//-------------------------------

 R_SIDEにCOIL_STDを[X001]という名前で配置                                                               │
│        このR_SIDEのコイルはA接点で励磁される仕様です                                                      │
│                                                                                                           │
│        下段のL_SIDE側に、COIL_STDを[X001]という名前でもう一個配置                                         │
│                                                                                                           │
│        こうしておけば、上段の[X001]が励磁されたタイミングで下段の[X001]がONになるというイメージであっって │
│    ますか？                                                                                               │
╰────────────────────────────────────────────────────────────────────────────────────────────────────────────╯

✦ そのご質問は、PLCのシミュレーションを作る上で、最も重要で、そして多くの人が最初に混乱するポイントです。そ
  のイメージが正しいかどうかを議論することは、プロジェクトを成功に導く上で非常に価値があります。

  結論から申し上げますと、そのイメージは、PLCの基本的なルールとは少し異なります。これは多くの方が最初にイ
  メージする、非常に自然な考え方なのですが、PLCには特有の「お作法」があります。

  ---

  PLCの最重要ルール：「アドレス」が唯一の真実

  PLCの世界では、デバイスの「アドレス」（X001, Y001,
  M1など）が、そのデバイスの状態を管理する唯一のIDです。グリッド上のどこに配置されていようと、X001というア
  ドレスを持つデバイスは、プログラム全体でただ一つの実体として扱われます。

  これを踏まえて、PLCの2つの基本要素の役割を明確に区別する必要があります。

  1. コイル (`-( )-)` の役割：状態を「書き込む」唯一の場所

   * コイルは、その行の論理演算の「結果」として、特定のアドレスの状態をONまたはOFFに「書き込む」ためのデバイ
     スです。
   * 最重要ルール: プログラム全体で、同じアドレスを持つ標準コイルは1つしか配置できません。 もし複数の行で同
     じアドレスのコイル（例：Y001のコイルが2つ）を配置すると、「二重コイル」というエラーになります。「ある行
     ではONにしろ、別の行ではOFFにしろ」という矛盾した命令が発生し、PLCは正しく動作できなくなるからです。

  2. 接点 (`-| |-, -|/|-)` の役割：状態を「読み出す」場所

   * 接点は、特定のアドレスの現在の状態（ONかOFFか）を「読み出し」、その行の「入力条件」として使用するための
     デバイスです。
   * 同じアドレスの接点は、プログラム内に何個でも、どこにでも配置できます。例えば、「Y001がONなら」という条
     件を、様々な場所で参照できます。

  ---

  ご提示のイメージをPLCのルールで解釈すると

  ご提示いただいたシナリオを、上記のルールに当てはめてみましょう。

   1. 「R_SIDEにCOIL_STDを[X001]という名前で配置」
       * まず、PLCの慣習として、Xで始まるアドレスは「外部入力（スイッチなど）」に割り当てられ、コイル（出力
         ）には通常Y（外部出力）やM（内部リレー）を使います。ここでは仮に、これを「コイル `Y001`」とします。
       * このコイルは、その行の左側にある条件（例：A接点X001）が満たされたときに励磁され、Y001というアドレス
         の内部メモリをTrueに書き込みます。

   2. 「下段のL_SIDE側に、COIL_STDを[X001]という名前でもう一個配置」
       * これも「コイル `Y001`」だとします。この時点で、PLCは「二重コイル」エラーを検出します。Y001の状態を
         書き込める場所が2つ存在してしまい、どちらを優先すべきか判断できないためです。
       * また、コイルは「出力結果」なので、電源バスであるL_SIDE側に配置することはできません。必ず右側のR_SID
         Eの直前に配置されます。

  正しいイメージ：コイルで「書き込み」、接点で「読み出す」

  ユーザーさんがイメージされている「上段の[X001]が励磁されたら、下段の何かがONになる」という動作を、PLCで
  正しく実現する方法は以下のようになります。

  【正しい実装】

   1. 上段（1行目）:
       * ある条件（例：A接点 X001）がONになると、`コイル Y001` が励磁される。
       * [A接点 X001] ------( コイル Y001 )
       * 役割: Y001というアドレスの状態をTrueに書き込む。

   2. 下段（2行目）:
       * `A接点 Y001` を入力条件として使う。
       * [A接点 Y001] ------( 別のコイル Y002 )
       * 役割: Y001というアドレスの状態を読み出す。

  【動作】

   * 1行目のX001がONになると、コイル Y001が励磁され、PLC内部のY001メモリがTrueになります。
   * 次のスキャンで2行目を解析する際、PLCはA接点 
     Y001の状態をチェックします。Y001メモリはTrueなので、この接点はON（導通）と判断されます。
   * 結果として、2行目のコイル Y002が励磁されます。

  まとめ

   * コイル（出力）は、アドレスの状態を書き込むためのもので、各アドレスに1つだけ。
   * 接点（入力条件）は、アドレスの状態を読み出すためのもので、各アドレスに何個でも置ける。

  この「書き込み（コイル）」と「読み出し（接点）」の役割分担を明確にすることが、PLCシミュレーターを正しく
  実装する上での鍵となります。この概念は非常に重要なので、GEMINI.mdにも追記しておきましょうか？



////////------------------------------------------------------//