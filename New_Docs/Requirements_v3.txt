# PyPlc Ver3 要件定義書
# 作成日: 2025-01-28
# 対象: PyPlc Ver3 開発・Ver2からの移行

## 📋 **1. システム概要**

### **1.1 プロジェクト目的**
- PLC（Programmable Logic Controller）ラダー図シミュレーター
- 工場検証用途および学習目的の両立
- リアルタイム動作可視化システムの提供
- 実PLC仕様準拠による教育効果の向上

### **1.2 システム特性**
- **プラットフォーム**: Python + Pyxel
- **アーキテクチャ**: モジュール化されたMVC構造
- **表示方式**: グリッドベース交点配置システム
- **リアルタイム性**: 60FPS動作、電力フロー可視化

### **1.3 ターゲットユーザー**
- PLC学習者・教育機関
- 工場エンジニア（回路検証用途）
- システム開発者（デバッグ・テスト用途）

## 📋 **2. 機能要件**

### **2.1 デバイス機能要件**

#### **2.1.1 接点系デバイス（PLC標準準拠）**
| デバイス名 | 定義名 | PLC表記 | 動作仕様 | 実装状況 |
|------------|---------|---------|----------|----------|
| A接点 | TYPE_A | `-\| \|-` | デバイス値True時導通ON | ✅実装済 |
| B接点 | TYPE_B | `-\|/\|-` | デバイス値False時導通ON | ✅実装済 |

#### **2.1.2 コイル系デバイス（PLC標準準拠）**
| デバイス名 | 定義名 | PLC表記 | 動作仕様 | 実装状況 |
|------------|---------|---------|----------|----------|
| 通常コイル | COIL | `-( )-` | 入力条件True時励磁 | ❌Ver3新規 |
| 反転コイル | COIL_REV | `-(/)-` | 入力条件True時非励磁 | ❌Ver3新規 |

**要件**: 現在のINCOIL/OUTCOIL概念を廃止し、PLC標準の接点/コイル概念に統一

#### **2.1.3 機能系デバイス**
| デバイス名 | 定義名 | 動作仕様 | 実装状況 |
|------------|---------|----------|----------|
| タイマー | TIMER | 設定時間経過後接点ON | ✅実装済（3状態） |
| カウンター | COUNTER | 設定回数到達で接点ON | ✅実装済（エッジ検出） |

#### **2.1.4 接続系デバイス**
| デバイス名 | 定義名 | 動作仕様 | 実装状況 |
|------------|---------|----------|----------|
| 水平接続 | LINK_SIDE | デバイス間水平接続 | ❌Ver3新規 |
| 垂直接続（上） | LINK_UP | 上方向グリッド接続 | ✅実装済 |
| 垂直接続（下） | LINK_DOWN | 下方向グリッド接続 | ✅実装済 |

### **2.2 回路機能要件**

#### **2.2.1 基本論理回路**
- **AND回路**: 複数接点の直列接続
- **OR回路**: 複数接点の並列接続  
- **NOT回路**: B接点による反転論理
- **組み合わせ回路**: 上記の複合回路

#### **2.2.2 順序回路**
- **自己保持回路**: コイル出力→接点入力のフィードバック
- **タイマー回路**: 遅延動作回路
- **カウンター回路**: 計数動作回路
- **インターロック回路**: 安全機能回路

#### **2.2.3 電気的継続性**
- **左バス（L_SIDE）**: 電源供給バス（Col=0固定）
- **右バス（R_SIDE）**: ニュートラルバス（Col=19固定）
- **水平経路**: 明示的LINK_SIDEによる接続
- **垂直経路**: LINK_UP/DOWNペアによる接続

### **2.3 ユーザーインターフェース要件**

#### **2.3.1 デバイスパレット**
```
キー割り当て（Ver3仕様）:
1: A接点 (TYPE_A)
2: B接点 (TYPE_B)  
3: 水平接続 (LINK_SIDE)
4: 通常コイル (COIL)
5: 反転コイル (COIL_REV)
6: タイマー (TIMER)
7: カウンター (COUNTER)
8: 上向き接続 (LINK_UP)
9: 下向き接続 (LINK_DOWN)
0: 削除 (DEL)
```

#### **2.3.2 操作モード**
- **EDIT モード**: デバイス配置・編集・削除
- **RUN モード**: 回路実行・シミュレーション
- **STOP モード**: 実行停止・状態リセット

#### **2.3.3 表示仕様**
- **画面サイズ**: 384x384ピクセル
- **グリッドサイズ**: 15行×20列
- **セルサイズ**: 16x16ピクセル
- **電力フロー表示**: リアルタイム色分け可視化

## 📋 **3. 非機能要件**

### **3.1 パフォーマンス要件**
- **フレームレート**: 60FPS安定動作
- **スキャンタイム**: 100ms（設定可能：50-500ms）
- **最大デバイス数**: 100デバイス
- **応答性**: マウス操作10ms以内応答

### **3.2 品質要件**
- **可読性**: PLC標準記法準拠
- **保守性**: モジュール化アーキテクチャ
- **拡張性**: 新デバイス追加容易性
- **テスト性**: 単体・結合テスト対応

### **3.3 制約条件**
- **プラットフォーム**: Python 3.8+
- **ライブラリ**: Pyxel 1.9.0+
- **実行環境**: 仮想環境（venv）
- **開発環境**: VSCode推奨

## 📋 **4. データ要件**

### **4.1 デバイスデータ構造**
```python
@dataclass
class DeviceData:
    device_type: DeviceType
    address: str
    position: tuple[int, int]  # (row, col)
    state: bool
    properties: dict  # Timer値、Counter値等
```

### **4.2 回路データ構造**
```python
@dataclass  
class CircuitData:
    devices: dict[tuple[int, int], DeviceData]
    connections: list[Connection]
    electrical_state: dict[tuple[int, int], bool]
```

### **4.3 設定データ**
- **グリッド設定**: 行数、列数、セルサイズ
- **表示設定**: ウィンドウサイズ、原点座標
- **デバイス設定**: アドレス生成、プリセット値
- **UI設定**: パレット位置、スナップ閾値

## 📋 **5. Ver2との差分分析**

### **5.1 概念的変更**
| 項目 | Ver2実装 | Ver3要件 | 影響度 |
|------|----------|----------|--------|
| デバイス概念 | INCOIL/OUTCOIL | 接点/コイル | 🔴高 |
| 用語体系 | 混在 | PLC標準準拠 | 🟠中 |
| 水平配線 | 暗黙接続 | 明示的LINK_SIDE | 🔴高 |

### **5.2 実装変更**
| モジュール | Ver2状況 | Ver3要件 | 作業量 |
|------------|----------|----------|--------|
| config.py | 定数化完了 | 用語統一 | 🟢小 |
| DeviceType | INCOIL定義あり | 接点/コイル再定義 | 🟠中 |
| sprites.json | Ver2対応 | Ver3スプライト追加 | 🟠中 |
| 電気系統 | 垂直接続のみ | 水平接続追加 | 🔴高 |

### **5.3 移行リスク**
- **高リスク**: デバイス概念変更による既存ロジック影響
- **中リスク**: スプライト定義変更による表示系影響  
- **低リスク**: 用語統一による文書・コメント修正

## 📋 **6. Ver3開発計画**

### **6.1 開発方針**
- **段階的移行**: Ver2の安定動作を維持しながらVer3機能を段階導入
- **後方互換性**: 可能な限りVer2設定・データの継承
- **テスト駆動**: 各段階での動作確認を徹底

### **6.2 実装フェーズ**

#### **Phase 1: 基盤整備（2週間）**
- [ ] 用語統一（接点、LINK、ON/OFF）
- [ ] DeviceType再定義（COIL/COIL_REV追加）
- [ ] スプライト追加（LINK_SIDE、COIL系）
- [ ] 動作確認・既存機能保持

#### **Phase 2: PLC標準準拠（3週間）**
- [ ] 接点/コイル概念実装
- [ ] INCOIL/OUTCOIL廃止・移行
- [ ] 電気的継続性ロジック変更
- [ ] 基本回路動作テスト

#### **Phase 3: 水平配線システム（2週間）**
- [ ] LINK_SIDE実装
- [ ] 明示的配線トレース
- [ ] 自己保持回路完全動作
- [ ] 複雑回路対応

#### **Phase 4: 機能強化（1週間）**
- [ ] UI/UX改善
- [ ] エラー検証機能
- [ ] デバッグ支援機能
- [ ] ドキュメント整備

### **6.3 成果物**
- **Ver3実行可能システム**
- **移行ガイドライン**  
- **操作マニュアル**
- **開発者ドキュメント**

## 📋 **7. 検証要件**

### **7.1 機能テスト**
- [ ] 全デバイス単体動作テスト
- [ ] 基本論理回路テスト（AND/OR/NOT）
- [ ] 順序回路テスト（自己保持/タイマー/カウンター）
- [ ] 電気的継続性テスト

### **7.2 非機能テスト**
- [ ] パフォーマンステスト（60FPS維持）
- [ ] ストレステスト（最大デバイス数）
- [ ] ユーザビリティテスト
- [ ] 長時間稼働テスト

### **7.3 受け入れ基準**
- PLC標準仕様完全準拠
- 自己保持回路完全動作
- Ver2機能完全継承
- 60FPS安定動作維持

## 📋 **8. 制約・前提条件**

### **8.1 技術制約**
- Python型安全性（type hint必須）
- 日本語コメント（保守性確保）
- ステップバイステップ開発（Git管理）
- 座標系統一（grid[row][col] = [y座標][x座標]）

### **8.2 開発制約**
- 既存Ver2動作保持
- 段階的確認・承認プロセス
- ドキュメント同期更新
- テスト自動化対応

### **8.3 運用制約**  
- 仮想環境実行（./venv/bin/python）
- VSCode開発環境
- .vscode設定準拠
- CLAUDE.md情報管理

## 📋 **9. 成功指標**

### **9.1 機能指標**
- [ ] PLC教科書レベルの回路が完全動作
- [ ] 自己保持回路の安定動作
- [ ] 複雑回路の正確なシミュレーション
- [ ] リアルタイム可視化の実現

### **9.2 品質指標**
- [ ] 無故障連続動作（1時間以上）
- [ ] メモリリーク無し
- [ ] CPU使用率30%以下
- [ ] ユーザー操作遅延10ms以下

### **9.3 保守性指標**
- [ ] 新デバイス追加が1日以内
- [ ] バグ修正が平均2時間以内
- [ ] 機能追加影響範囲の限定
- [ ] ドキュメント同期率100%

---

**この要件定義書は、PyPlc Ver3開発の完全な指針として機能し、Ver2からの段階的移行を保証します。**

*最終更新: 2025-01-28*  
*次回更新: 開発Phase完了時*