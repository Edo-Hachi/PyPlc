# PyPlc統一仕様書 v2.0
# 作成日: 2025-01-28
# 基準: PLC標準仕様準拠

## 📋 **デバイス定義**

### **1. 接点系デバイス**

#### **A接点（通常接点）**
- **デバイス名**: A接点
- **定義名**: TYPE_A
- **スプライト名**: TYPE_A_ON / TYPE_A_OFF
- **動作**: デバイス値がTrueの時に導通ON、Falseの時に導通OFF
- **PLC表記**: `-| |-`
- **説明**: ノーマルオープン接点

#### **B接点（反転接点）**
- **デバイス名**: B接点
- **定義名**: TYPE_B
- **スプライト名**: TYPE_B_ON / TYPE_B_OFF
- **動作**: デバイス値がFalseの時に導通ON、Trueの時に導通OFF
- **PLC表記**: `-|/|-`
- **説明**: ノーマルクローズ接点（反転接点）

### **2. コイル系デバイス**

#### **通常コイル**
- **デバイス名**: 通常コイル
- **定義名**: OUTCOIL_NML
- **スプライト名**: OUTCOIL_NML_ON / OUTCOIL_NML_OFF
- **動作**: 入力条件がTrueの時にコイル励磁（ON）
- **PLC表記**: `-( )-`
- **説明**: 標準出力コイル

#### **反転コイル**
- **デバイス名**: 反転コイル
- **定義名**: OUTCOIL_REV
- **スプライト名**: OUTCOIL_REV_ON / OUTCOIL_REV_OFF
- **動作**: 入力条件がTrueの時にコイル非励磁（OFF）、Falseの時に励磁（ON）
- **PLC表記**: `-(/)-`
- **説明**: 反転出力コイル

### **3. 機能系デバイス**

#### **タイマー**
- **デバイス名**: タイマー
- **定義名**: TIMER
- **スプライト名**: TIMER_STANDBY / TIMER_CNTUP / TIMER_ON
- **状態**: 
  - STANDBY: 待機中（導通OFF）
  - CNTUP: カウントアップ中（導通OFF）
  - ON: 作動時（導通ON）
- **動作**: 設定時間経過後に接点ON

#### **カウンター**
- **デバイス名**: カウンター
- **定義名**: COUNTER
- **スプライト名**: COUNTER_ON / COUNTER_OFF
- **動作**: 設定回数到達で接点ON
- **エッジ検出**: 立ち上がりエッジでカウントアップ

### **4. 接続系デバイス**

#### **水平接続（LINE）**
- **デバイス名**: 水平LINK
- **定義名**: LINK_SIDE
- **スプライト名**: LINK_SIDE
- **説明**: デバイス間を水平方向に接続するライン

#### **垂直接続（上向き）**
- **デバイス名**: 上向きLINK
- **定義名**: LINK_UP
- **スプライト名**: LINK_UP
- **説明**: 配置グリッドから上方向のLINK_DOWNと接続

#### **垂直接続（下向き）**
- **デバイス名**: 下向きLINK
- **定義名**: LINK_DOWN
- **スプライト名**: LINK_DOWN
- **説明**: 配置グリッドから下方向のLINK_UPと接続

### **5. システム系デバイス**

#### **削除**
- **デバイス名**: 削除
- **定義名**: DEL
- **スプライト名**: DEL
- **説明**: 編集画面でのデバイス削除機能

## 🎮 **UI仕様**

### **キー割り当て（現在の実装を維持）**
```
1: A接点 (TYPE_A)
2: B接点 (TYPE_B)  
3: [未定義]
4: 通常コイル (OUTCOIL_NML)
5: 反転コイル (OUTCOIL_REV)
6: タイマー (TIMER)
7: カウンター (COUNTER)
8: 上向きLINK (LINK_UP)
9: 下向きLINK (LINK_DOWN)
0: 削除 (DEL)
```

### **追加予定デバイス**
- **3番キー**: 水平LINK (LINK_SIDE) - 将来実装予定

## 📏 **用語統一規則**

### **統一用語**
- **接点**: デバイス間接続部（旧: 端子、スイッチ）
- **LINK**: デバイス間接続ライン（旧: ライン、配線、WIRE）
- **ON/OFF**: デバイス状態表現（旧: 作動時/待機時）

### **PLC標準準拠**
- **接点**: 入力条件を表現 (`-| |-`, `-|/|-`)
- **コイル**: 出力結果を表現 (`-( )-`, `-(/)-`)
- **デバイス値**: True/False で状態管理

## 🔧 **技術仕様**

### **スプライト命名規則**
- **ON状態**: `[DEVICE_NAME]_ON`
- **OFF状態**: `[DEVICE_NAME]_OFF`
- **特殊状態**: `[DEVICE_NAME]_[STATE]` (例: TIMER_STANDBY)

### **デバイス配置制約**
- **Col 0**: L_SIDE（左バス）専用
- **Col 1-18**: 一般デバイス編集可能領域
- **Col 19**: R_SIDE（右バス）専用

### **電気的継続性**
- **水平方向**: LINK_SIDEによる明示的接続
- **垂直方向**: LINK_UP/LINK_DOWNペアによる接続
- **電力フロー**: 左バス → デバイス → 右バスの経路

## 📝 **実装優先順位**

### **Phase 1: 基本仕様統一**
1. スプライト名の統一（TIMER_STANBY → TIMER_STANDBY）
2. デバイス定義名の統一
3. 用語の完全統一

### **Phase 2: PLC標準準拠**
1. 接点/コイル概念の正しい実装
2. 反転コイル動作の明確化
3. デバイス動作の標準化

### **Phase 3: 機能拡張**
1. LINK_SIDE（水平配線）の実装
2. より複雑な回路パターン対応
3. 自己保持回路の完全動作

## 🎯 **開発方針**

- **段階的実装**: ステップバイステップでの確実な進行
- **動作優先**: 全体が動作することを最優先
- **将来対応**: 拡張性を考慮した設計
- **PLC準拠**: 実際のPLC仕様との整合性維持

---
*この仕様書は Question.txt と Question02.txt の回答を基に統一された最終仕様です*