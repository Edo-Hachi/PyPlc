ドキュメントを分析して、用語や仕様の不一致・疑問点を整理しました：

## 🔍 **用語・仕様の不一致と疑問点**

### **1. デバイス名称の不統一**

#### **コイル系デバイスの混在**
- **DeviceDefineTable.csv**: `入力 コイル (INCOIL)`, `出力コイル (OUTCOIL_NML/REV)`
- **現在の実装**: `INCOIL`, `OUTCOIL_NML`, `OUTCOIL_REV`
- **DeviceSelectMenu.md**: 単に `コイル`

**疑問**: 「入力コイル」と「出力コイル」の機能的違いは何ですか？PLCでは通常コイルは出力ですが、「入力コイル」は中間結果保存用でしょうか？

入力コイルはグリッド上で接点変更により、ON,OFFされるコイルを明示的に示しました。
一般的なラダー図だと、ー（Y001）ー　と表されるものです。「リレー」のほうが適切でしょうか？


出力コイルは、入力コイルが例示された時の接点の状態について明示的に示しました。(Y001)がOnになった場合の出力です。
ラダー図だと、ー|Y001|ー　ですね。
出力コイルという言い方は変でしょうか？代替案があれば教えてください。
ー|Y001|ー　も、標準出力（Y001励磁でON）と、反転出力（Y001励磁でOFF）があるので、実装上で２種類に分けて考えています。



#### **リンク系デバイスの曖昧性**
- **DeviceDefineTable.csv**: `リンク (LINK)` で `LINK_SIDE`, `LINK_UP`, `LINK_DOWN`
- **現在の実装**: `LINK_UP`, `LINK_DOWN` のみ
- **疑問**: `LINK_SIDE`とは何ですか？水平配線のことでしょうか？

グリッド上でデバイス接点とデバイス設定を結ぶものです。あなたの考えであっています。
横方向は「LINK_SIDE」で統一しましょう。

LINK_UPは配置されたグリッドから上方に存在するグリッドデバイス（LINK_DOWN）とを結ぶデバイス
LINK_DOWNは配置されたグリッドから下方に存在するグリッドデバイス（LINK_UP）とを結びます
この縦方向をつなぐための２つのデバイスが揃い、結線されることで、横方向のライン同士を結びつけます
BeforeRemake/以下のソースコードに、以前のテストバージョンにて実装されていた記録が残っているはずです。



### **2. スプライト名と実装の差異**

#### **タイマーの状態名**
- **DeviceDefineTable.csv**: `TIMER_STANBY` (スタンバイ)
- **現在の実装**: `TIMER_STANDBY` (正しいスペル)
- **疑問**: タイポの修正が必要？

答え：タイポです



#### **出力コイルの動作仕様**
- **DeviceDefineTable.csv**: 
  - `OUTCOIL_REV_ON` = 作動時だが「待機時　導通OFF」
  - `OUTCOIL_REV_OFF` = 待機時だが「作動時　導通ON」
- **疑問**: この記述は論理的に矛盾していませんか？反転コイルの動作定義を明確にする必要があります。


 - `OUTCOIL_REV_ON` = 作動時だが「待機時　導通OFF」
 - `OUTCOIL_REV_OFF` = 待機時だが「作動時　導通ON」

先に書いた、

＞＞　ー|Y001|ー　も、標準出力（Y001励磁でON）と、反転出力（Y001励磁でOFF）があるので、実装上で２種類に分けて考えています。

の考えで、INCOILがOFFの状態であれば、出力コイル　OUTCOLILは反転状態のON
INCOILがONになれば、出力コイルはOFFになるという考え方です。




### **3. UI仕様の食い違い**

#### **キー割り当ての不一致**
- **DeviceSelectMenu.md**: 0-9キーでのUP MENU/DOWN MENU 2段構成
- **現在の実装**: 1-0キーでの単一パレット10デバイス

**疑問**: 
1. UP MENUとDOWN MENUの切り替え方法は？
2. 「標準/反転」モードはどのように実現しますか？
3. 現在の1-0キー仕様を変更する予定ですか？

今の実装でという面は良いと思います。（そんなにデバイスは増えないと考えています。）



### **4. デバイス定義の不明確さ**

#### **LINE デバイスの実体**
- **DeviceSelectMenu.md**: `[LINE] 4:ライン`
- **現在の実装**: 明示的な LINE デバイスなし
- **疑問**: これは水平配線 (WIRE_H) のことですか？それとも別概念ですか？

#### **接点系の動作定義**
- **A接点**: 作動時導通ON、待機時導通OFF
- **B接点**: 待機時導通ON、作動時導通OFF
- **疑問**: 「作動時」とは具体的に何の状態ですか？デバイスの値がTrueの時ですか？


そうです、デバイスがTrueになった時のことです。紛らわしくてごめんね。



### **5. アーキテクチャ計画との整合性**

#### **Gemini_Logic_Plan.mdの適用性**
- **提案**: `can_power_pass_through()` メソッドによるポリモーフィズム
- **現在**: 各デバイスクラスでの個別実装
- **疑問**: この設計変更を実際に適用する予定ですか？

まだまだ、先の話で良いです。今は考えないでください。
今は、全体をとおして動くことを目標にしましょう。

#### **状態管理の中央集権化**
- **提案**: `CircuitStateManager` による統一管理
- **現在**: 各システムでの分散管理
- **疑問**: パフォーマンス向上は体感できるレベルで必要ですか？


まだまだ、先の話で良いです。今は考えないでください。
今は、全体をとおして動くことを目標にしましょう。


### **6. 用語統一が必要な項目**

1. **コイル** vs **出力** vs **入力コイル** の定義明確化
2. **ライン** vs **配線** vs **WIRE** vs **LINK** の使い分け
3. **作動時/待機時** vs **ON/OFF状態** の表現統一
4. **接点** vs **端子** vs **スイッチ** の用語統一

１＞入力コイルは、PLC配置画面の右側で励磁を受けるものとして定義しましょう。このコイルが励磁したときに画面左端で入力コイルの状態を出力するのが「出力コイル（通常／反転）」としましょう

２：LINKで統一しましょう。デバイス間をつなぐラインのことです。

３：あなたの指摘が正しいです。　ON,OFFで統一しましょう

## 🎯 **提案: 仕様書整理の優先順位**

1. **最優先**: デバイス名称とスプライト名の完全統一
2. **高優先**: UI仕様（キー割り当て）の確定
3. **中優先**: デバイス動作の論理定義明確化
4. **低優先**: アーキテクチャ改善計画の適用判断

１番から進めていき、仕様書を、New_definition.txt  としてNew_Docsに出力してください
